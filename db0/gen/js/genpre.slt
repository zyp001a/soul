~
##proglParse = @FuncInternal {}
##tplParse = @FuncInternal {}
##asobj = @FuncInternal {}
##asval = @FuncInternal {}
~
process.argv.shift();
process.argv.shift();
global._$argv = process.argv;
global._$env = process.env;
var fs = require("fs");
var proglParser = require("./progl-parser")
var tplParser = require("./tpl-parser")
function die(){
  for(var i in arguments){
    console.error(arguments[i]);
  }
  console.error(getStackTrace());
  process.exit();
}
function getStackTrace(){
  var obj = {};
  Error.captureStackTrace(obj, getStackTrace);
  return obj.stack.toString().replace("[object Object]\n","");
}

Object.defineProperty(global, '__stack', {
  get: function() {
    var orig = Error.prepareStackTrace;
    Error.prepareStackTrace = function(_, stack) {
      return stack;
    };
    var err = new Error;
    Error.captureStackTrace(err, arguments.callee);
    var stack = err.stack;
    Error.prepareStackTrace = orig;
    return stack;
  }
});
Object.defineProperty(global, '__line', {
  get: function() {
    return __stack[2].getLineNumber();
  }
});
Object.defineProperty(global, '__line2', {
  get: function() {
    return __stack[3].getLineNumber();
  }
});
Object.defineProperty(global, '__function', {
  get: function() {
    return __stack[2].getFunctionName();
  }
});
Object.defineProperty(global, '__file', {
  get: function() {
    return __stack[2].getFileName();
  }
});
function initx(p, o){
  if(!p) p = {};
  p.__ = o || {}
  Object.defineProperty(p, '__', {
    enumerable: false,
    configurable: false
  });
  return p;
}
function haskey(x, k){
  return Object.getOwnPropertyDescriptor(x, k);
}
function asval(o){
  var t = typeof o;
  if(t != "object"){
    return o;
  }
  if(!o.__){
    return o;
  }
  if(o.__.isval)
    return o.val  
  return o;
}
function asobj(o){
  var t = typeof o;
  if(t == "undefined"){
    return initx({val: undefined}, {obj: global._undfc, isval:1});  
  }
  if(t == "object"){
    if(!t) return initx({val: null}, {obj: global._nullc, isval:1});
    if(!o.__){
      if(Array.isArray(o)){
        return initx(o, {obj: global._arrc});
      }else{
        return initx(o, {obj: global._dicc});      
      }
    }
    return o;
  }
  if(t == "string"){
    return initx({val: o}, {obj: global._strc, isval:1});  
  }
  if(t == "number"){
    return initx({val: o}, {obj: global._numc, isval:1});  
  }
  die(t + " not defined, asobj")
}
function log(str){
  console.log(__line+":"+__file+":"+__function+":"+__line2);
  console.log(str);
}
