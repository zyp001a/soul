~
#f = #0.callFunc
#a = #0.callArgs
@if(type(f) == "SidLib"){
 #f = f.sidLib
}
#printargs = 0
@if(istype(f, "FuncTpl")){
 ~~=tplCall(f, a, $env)~~
}@elif(istype(f, "Func")){
 #n = f->id
 #r = scopeGet(#$env.envExecScope, n)
 @if(r){
  ~~=call(r, a, $env)~~
 }@elif(type(f) == "FuncInternal" || f->isdef){
  @for #i=len(a);i<len(f.funcArgts);i++ {
   #vvv = Arr(f.funcArgts)[i]
   @if(vvv.argtType){
    @if(isclass(vvv.argtType, "Val")){
     push(a, curryGet(vvv.argtType, "valDefault"))
    }@else{
     push(a, _)
    }
   }@else{
    push(a, _)
   }
  }
  printargs = 1 
  ~~=f->name~~
 }@elif(type(f) == "FuncNative" && f->maininit){
  printargs = 1 
  ~~=f->name~~
 }@elif(type(f) == "Call"){
  printargs = 1
  ~~=exec(f, $env)~~	
 }@else{
  log(type(f))
  log(f->id)	
  die("Call gen: func not defined")
  printargs = 1
  ##$funcs[n] = f
  ~~=n~~
 }
}@else{
 printargs = 1
 ~~=exec(f, $env)~~
}
#arr = []
@if printargs {
 @foreach e a{
  push(arr, exec(e, $env))
 }
 ~(~=join(arr, ", ")~)~
}
~