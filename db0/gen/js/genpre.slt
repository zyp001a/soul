function die(){
  for(var i in arguments){
    console.error(arguments[i]);
  }
  console.error(getStackTrace());
  process.exit();
}
function getStackTrace(){
  var obj = {};
  Error.captureStackTrace(obj, getStackTrace);
  return obj.stack.toString().replace("[object Object]\n","");
}

Object.defineProperty(global, '__stack', {
  get: function() {
    var orig = Error.prepareStackTrace;
    Error.prepareStackTrace = function(_, stack) {
      return stack;
    };
    var err = new Error;
    Error.captureStackTrace(err, arguments.callee);
    var stack = err.stack;
    Error.prepareStackTrace = orig;
    return stack;
  }
});
Object.defineProperty(global, '__line', {
  get: function() {
    return __stack[2].getLineNumber();
  }
});
Object.defineProperty(global, '__line2', {
  get: function() {
    return __stack[3].getLineNumber();
  }
});
Object.defineProperty(global, '__function', {
  get: function() {
    return __stack[2].getFunctionName();
  }
});
Object.defineProperty(global, '__file', {
  get: function() {
    return __stack[2].getFileName();
  }
});
function initx(p, o){
  if(!p) p = {};
  p.__ = o || {}
  Object.defineProperty(p, '__', {
    enumerable: false,
    configurable: false
  });
  return p;
}
function s(x, k, v){
  return w(x)[k] = v
}
function g(x, k){
  return w(x)[k];
}
function w(x){
  if(ptype(x) == "Obj"){
    return x.val;
  }
  return x;
}
function rw(x){
  var t = ptype(x);
  if(t == "Obj"){
    return x
  }
  return objNew(_def[t], {val: x});
}
function log(str){
  console.log(__line+":"+__file+":"+__function+":"+__line2);
  console.log(str);
}
