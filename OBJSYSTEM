Class
pre
 def: $k $v $c $i similarity
post
 schema:
   key: Model
 default:

alias
 
Model:
 type

Prop:
 color


$ -> -
_ -> /


Constraint

@ $at at
` $gr grave accent
' $q1 
" $q2 quote
: $co comma
{ $bl brace left
} $br brace right
( $pl
) $pr square bracket right
[ $sl
] $sr parentheses right
& $am 
. $do

function pget(x, k){
  if(x.__) return x.__[k];
  return x[k]
}
get dic/arr []
pget prop .


Obj: A special structure represent anything. Anything is obj.
 for js:
 common: {__:{}} //__ is obj
 dic: {___:{__:{}, dicElement: Class, val:self}}
 arr: [___:{__:{}, arrElement: Class, val:self}]
 scope: {___:{__:{}, scopeRoute: "", scopeParents: {}, val:self}}

Class: A special structure summarize the prop of obj {}

Meta: A class summarize the prop of Class {}

Meta  -> Class
Class -> Obj

Spec: A special structure, determine value/valuetype/restrict of class
 spec grammar: like mongodb query


map dbms
 Spec -> query/ sub
 Class -> schema
 Obj -> data

ArrCallable


Class {___:_}
Scope = Dic{scope:_}
Class = Scope{class:_} //
Val = Obj{val:_}
Num = Val{valtype:"Num"}
Str = Val{valtype:"Str"}
Function = Val{valtype:"Function"}

Dic = Val{valtype:"Dic"} //{val: {}} = {__:obj}
Arr = Val{valtype:"Arr"} //{val: {}} = {__:obj}

Callable

function _class(obj, clatree){
  
}

LessThan3 = Num{r:[&Bool(x){@return x.val < 3}]}


Val Num Str Undf
Obj Stream Buffer
__
___

color = new(Prop, Color)

Blue = Color$
Class$kcolor$cBlue




Naming strategy
Class
